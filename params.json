{"name":"emailjs","body":"# emailjs (v0.2.7)\r\n\r\nsend emails, html and attachments (files, streams and strings) from node.js to any smtp server\r\n\r\n## INSTALLING\r\n\r\n\tnpm install emailjs\r\n\r\n## FEATURES\r\n - works with SSL and TLS smtp servers (ex: gmail)\r\n - supports smtp authentication (PLAIN, LOGIN, CRAMMD5)\r\n - emails are queued and the queue is sent asynchronously\r\n - supports sending html emails and emails with multiple attachments (MIME)\r\n - attachments can be added as strings, streams or file paths\r\n - works with nodejs 3.8 and above\r\n\r\n## REQUIRES\r\n - access to an SMTP Server (ex: gmail)\r\n\r\n## EXAMPLE USAGE - text only emails\r\n\r\n```javascript\r\nvar email \t= require(\"./path/to/emailjs/email\");\r\nvar server \t= email.server.connect({\r\n   user:    \"username\", \r\n   password:\"password\", \r\n   host:    \"smtp.gmail.com\", \r\n   ssl:     true\r\n   \r\n});\r\n\r\n// send the message and get a callback with an error or details of the message that was sent\r\nserver.send({\r\n   text:    \"i hope this works\", \r\n   from:    \"you <username@gmail.com>\", \r\n   to:      \"someone <someone@gmail.com>, another <another@gmail.com>\",\r\n   cc:      \"else <else@gmail.com>\",\r\n   subject: \"testing emailjs\"\r\n}, function(err, message) { console.log(err || message); });\r\n```\r\n\r\n## EXAMPLE USAGE - html emails and attachments\r\n\r\n```javascript\r\nvar email \t= require(\"./path/to/emailjs/email\");\r\nvar server \t= email.server.connect({\r\n   user:\t\"username\", \r\n   password:\"password\", \r\n   host:\t\"smtp.gmail.com\", \r\n   ssl:\t\ttrue\r\n});\r\n\r\nvar headers\t= {\r\n   text:\t\"i hope this works\", \r\n   from:\t\"you <username@gmail.com>\", \r\n   to:\t\t\"someone <someone@gmail.com>, another <another@gmail.com>\",\r\n   cc:\t\t\"else <else@gmail.com>\",\r\n   subject:\t\"testing emailjs\"\r\n};\r\n\r\n// create the message\r\nvar message = email.message.create(headers);\r\n\r\n// attach an alternative html email for those with advanced email clients\r\nmessage.attach({data:\"<html>i <i>hope</i> this works!</html>\", alternative:true});\r\n\r\n// attach attachments because you can!\r\nmessage.attach({path:\"path/to/file.zip\", type:\"application/zip\", name:\"renamed.zip\"});\r\n\r\n// send the message and get a callback with an error or details of the message that was sent\r\nserver.send(message, function(err, message) { console.log(err || message); });\r\n\r\n// you can continue to send more messages with successive calls to 'server.send', \r\n// they will be queued on the same smtp connection\r\n\r\n// or you can create a new server connection with 'email.server.connect' \r\n// to asynchronously send individual emails instead of a queue\r\n```\r\n# API \r\n\r\n## email.server.connect(options)\r\n\r\n\t// options is an object with the following keys\r\n\toptions =\r\n\t{\r\n\t\tuser \t\t// username for logging into smtp \r\n\t\tpassword // password for logging into smtp\r\n\t\thost\t\t// smtp host\r\n\t\tport\t\t// smtp port (if null a standard port number will be used)\r\n\t\tssl\t\t// boolean or object {key, ca, cert} (if exists, ssl connection will be made)\r\n\t\ttls\t\t// boolean (if true, starttls will be initiated)\r\n\t\ttimeout\t// max number of milliseconds to wait for smtp responses (defaults to 5000)\r\n\t\tdomain\t// domain to greet smtp with (defaults to os.hostname)\r\n\t}\r\n\t\r\n## email.server.send(message, callback)\r\n\t\r\n\t// message can be a smtp.Message (as returned by email.message.create)\r\n\t// or an object identical to the first argument accepted by email.message.create\r\n\r\n\t// callback will be executed with (err, message)\r\n\t// either when message is sent or an error has occurred\r\n\r\n## email.message.create(headers)\r\n\r\n\t// headers is an object ('from' and 'to' are required)\r\n\t// returns a Message object\r\n\r\n\t// you can actually pass more message headers than listed, the below are just the\r\n\t// most common ones you would want to use\r\n\r\n\theaders =\r\n\t{\r\n\t\ttext\t\t// text of the email \r\n\t\tfrom\t\t// sender of the format (address or name <address> or \"name\" <address>)\r\n\t\tto\t\t\t// recipients (same format as above), multiple recipients are separated by a comma\r\n\t\tcc\t\t\t// carbon copied recipients (same format as above)\r\n\t\tbcc\t\t// blind carbon copied recipients (same format as above)\r\n\t\tsubject\t// string subject of the email\r\n\t}\r\n\r\n## Message.attach(options)\r\n\r\n\t// can be called multiple times, each adding a new attachment\r\n\t// options is an object with the following possible keys:\r\n   \r\n    options =\r\n    {\r\n        // one of these fields is required\r\n        path      // string to where the file is located\r\n        data      // string of the data you want to attach\r\n        stream    // binary stream that will provide attachment data (make sure it is in the paused state)\r\n                  // better performance for binary streams is achieved if buffer.length % (76*6) == 0\r\n                  // current max size of buffer must be no larger than Message.BUFFERSIZE\r\n      \r\n        // optionally these fields are also accepted\r\n        type\t      // string of the file mime type\r\n        name        // name to give the file as perceived by the recipient\r\n        alternative // if true, will be attached inline as an alternative (also defaults type='text/html')\r\n        inline      // if true, will be attached inline\r\n        encoded     // set this to true if the data is already base64 encoded, (avoid this if possible)\r\n        headers     // object containing header=>value pairs for inclusion in this attachment's header\r\n        related     // an array of attachments that you want to be related to the parent attachment\r\n    }\r\n\t\r\n## Authors\r\n\r\neleith\r\n\r\n## Testing\r\n\r\n\tnpm install -d\r\n\tnpm test\r\n\r\n## Contributions\r\n\r\nissues and pull requests are welcome\r\n","tagline":"html emails and attachments to any smtp server with nodejs","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}